name: Unity Build and Deploy

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]
  workflow_dispatch:

env:
  UNITY_VERSION: '6000.0.43f1'
  FIREBASE_PROJECT_ID: ${{ secrets.FIREBASE_PROJECT_ID }}

jobs:
  # Android向けビルドとデプロイジョブ
  build-android:
    name: Build and Deploy Android
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4.2.2

      # ディスク容量の確保
      - name: Free disk space
        run: |
          sudo swapoff -a && sudo rm -f /swapfile
          sudo rm -rf /usr/share/dotnet
          sudo rm -rf /opt/ghc /usr/local/.ghcup
          sudo apt-get remove -y google-cloud-cli || sudo apt-get remove -y google-cloud-sdk
          sudo apt-get autoremove -y && sudo apt-get clean
          docker system prune -af
          df -h

      - name: Clean up Docker space
        run: docker system prune --volumes -a -f

      - name: Cache Unity Library - Android
        uses: actions/cache@v4.2.0
        with:
          path: Library
          key: Library-Android-${{ hashFiles('Assets/**', 'Packages/**', 'ProjectSettings/**') }}
          restore-keys: |
            Library-Android-

      - name: Build Android App
        uses: game-ci/unity-builder@v4.3.0
        env:
          UNITY_EMAIL: ${{ secrets.UNITY_EMAIL }}
          UNITY_PASSWORD: ${{ secrets.UNITY_PASSWORD }}
          UNITY_LICENSE: ${{ secrets.UNITY_LICENSE }}
        with:
          targetPlatform: Android
          buildsPath: build
          buildName: MyAndroidApp
          androidExportType: androidPackage
          unityVersion: ${{ env.UNITY_VERSION }}

      - name: Upload Android Build Artifact
        uses: actions/upload-artifact@v4.6.0
        with:
          name: Build-Android
          path: build/Android/MyAndroidApp.apk

      - name: Deploy to Firebase App Distribution
        if: github.event_name != 'pull_request'
        run: |
          # Google Cloud SDKのインストール
          sudo apt-get update
          sudo apt-get install -y apt-transport-https ca-certificates gnupg curl
          echo "deb [signed-by=/usr/share/keyrings/cloud.google.gpg] https://packages.cloud.google.com/apt cloud-sdk main" \
            | sudo tee -a /etc/apt/sources.list.d/google-cloud-sdk.list
          curl https://packages.cloud.google.com/apt/doc/apt-key.gpg \
            | sudo apt-key --keyring /usr/share/keyrings/cloud.google.gpg add -
          sudo apt-get update
          sudo apt-get install -y google-cloud-sdk

      # 3) Firebase CLI インストール (standalone)
      - name: Install Firebase CLI
        run: |
          curl -sL https://firebase.tools | bash
          firebase --version

      - name: Setup Service Account & Distribute
        run: |
          # 1) JSON を復元
          echo "${{ secrets.GCP_SA_KEY }}" | base64 --decode > service_account.json
          echo "Service Account JSON size: $(stat -c %s service_account.json) bytes"
          
          # 2) 変数をエクスポート (これでこのステップのシェルで認識される)
          export GOOGLE_APPLICATION_CREDENTIALS="$(pwd)/service_account.json"
          
          # 3) Firebase CLI を使ってアップロード
          firebase appdistribution:distribute build/Android/MyAndroidApp.apk \
            --app ${{ secrets.FIREBASE_ANDROID_APP_ID }} \
            --groups "testers" \
            --release-notes "Release from GitHub Actions" \

  build-webgl:
    name: Build and Deploy WebGL
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4.2.2

      # ディスク容量の確保
      - name: Free disk space
        run: |
          sudo swapoff -a && sudo rm -f /swapfile
          sudo rm -rf /usr/share/dotnet
          sudo rm -rf /opt/ghc /usr/local/.ghcup
          sudo apt-get remove -y google-cloud-cli || sudo apt-get remove -y google-cloud-sdk
          sudo apt-get autoremove -y && sudo apt-get clean
          docker system prune -af
          df -h

      - name: Clean up Docker space
        run: docker system prune --volumes -a -f

      - name: Cache Unity Library - WebGL
        uses: actions/cache@v4.2.0
        with:
          path: Library
          key: Library-WebGL-${{ hashFiles('Assets/**', 'Packages/**', 'ProjectSettings/**') }}
          restore-keys: |
            Library-WebGL-

      - name: Build WebGL App
        uses: game-ci/unity-builder@v4.3.0
        env:
          UNITY_EMAIL: ${{ secrets.UNITY_EMAIL }}
          UNITY_PASSWORD: ${{ secrets.UNITY_PASSWORD }}
          UNITY_LICENSE: ${{ secrets.UNITY_LICENSE }}
        with:
          targetPlatform: WebGL
          buildsPath: build
          buildName: WebGL
          unityVersion: ${{ env.UNITY_VERSION }}

      - name: Upload WebGL Build Artifact
        uses: actions/upload-artifact@v4.6.0
        with:
          name: Build-WebGL
          path: build/WebGL
          retention-days: 14

      # ブランチ名からチャンネルIDを生成（PRでない場合のみ）
      - name: Generate Channel ID
        if: github.event_name != 'pull_request'
        id: channel
        run: |
          BRANCH_NAME="${GITHUB_REF#refs/heads/}"
          CHANNEL_ID=$(echo "$BRANCH_NAME" | tr '[:upper:]' '[:lower:]' | sed -e 's/[_\/]\+/-/g' -e 's/^-*//' -e 's/-*$//' -e 's/--*/-/g')
          CHANNEL_ID=$(echo "$CHANNEL_ID" | tr -cd 'a-z0-9-' | cut -c 1-36)
          if [[ "$BRANCH_NAME" == "main" ]]; then
            CHANNEL_ID="live"
          fi
          if [[ -z "$CHANNEL_ID" || "$CHANNEL_ID" == "-" ]]; then
            CHANNEL_ID="preview-${GITHUB_SHA::7}"
          fi
          echo "Generated Channel ID: $CHANNEL_ID"
          echo "CHANNEL_ID=$CHANNEL_ID" >> $GITHUB_ENV

      # Firebase CLI を使って Hosting にデプロイ（PRでない場合のみ）
      - name: Deploy to Firebase Hosting using CLI
        if: github.event_name != 'pull_request'
        run: |
          # Firebase CLI インストール
          if ! command -v firebase &> /dev/null; then
              echo "Firebase CLI not found, installing..."
              if ! command -v curl &> /dev/null; then sudo apt-get update && sudo apt-get install -y curl; fi
              curl -sL https://firebase.tools | bash
          fi
          firebase --version

          # サービスアカウントキー処理
          echo "${{ secrets.GCP_SA_KEY }}" | base64 --decode > service_account_webgl.json
          JSON_SIZE=$(stat -c %s service_account_webgl.json)
          echo "WebGL Service Account JSON size: $JSON_SIZE bytes"
          if [ "$JSON_SIZE" -lt 100 ]; then
            echo "Error: Failed to create valid WebGL service account file."
            cat service_account_webgl.json
            exit 1
          fi
          export GOOGLE_APPLICATION_CREDENTIALS="$(pwd)/service_account_webgl.json"

          # --- デプロイコマンド ---
          FIREBASE_PROJECT="${{ env.FIREBASE_PROJECT_ID }}"
          if [ -z "$FIREBASE_PROJECT" ]; then
            echo "Error: FIREBASE_PROJECT_ID env var is not set."
            exit 1
          fi

          DEPLOY_CHANNEL="${{ env.CHANNEL_ID }}"
          # ★ 公開するディレクトリ（ビルド成果物の場所）
          DEPLOY_CHANNEL="${{ env.CHANNEL_ID }}"
          # ↓↓↓ ★★★ 公開ディレクトリのパスを修正 ★★★ ↓↓↓
          PUBLIC_DIR="build/WebGL/WebGL"

          echo "Creating temporary firebase.json with headers..."
          echo '{
            "hosting": {
              "public": "'"$PUBLIC_DIR"'",
              "ignore": [
                "firebase.json",
                "**/.*",
                "**/node_modules/**"
              ]
            }
          }' > firebase.json
          echo "Generated firebase.json:"
          cat firebase.json
          
          echo "Deploying to project '$FIREBASE_PROJECT' on channel '$DEPLOY_CHANNEL'"

          # チャンネルに応じたデプロイコマンド (変更なし)
          if [[ "$DEPLOY_CHANNEL" == "live" ]]; then
             echo "Deploying to production (live) channel..."
             firebase deploy \
               --project "$FIREBASE_PROJECT" \
               --only hosting \
               --message "Deploy build ${{ github.run_number }} from commit ${{ github.sha }} (branch: ${GITHUB_REF_NAME})" \
               --force \
               --debug
          else
             echo "Deploying to preview channel: $DEPLOY_CHANNEL"
             firebase hosting:channel:deploy "$DEPLOY_CHANNEL" \
               --project "$FIREBASE_PROJECT" \
               --only hosting \
               --expires 7d \
               --debug
          fi
          echo "Firebase deployment command executed."

        env:
          FIREBASE_CLI_PREVIEWS: hostingchannels
          CI: true

build-ios:
    name: Build and Deploy iOS
    runs-on: macos-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4.2.2

      - name: Cache Unity Library - iOS
        uses: actions/cache@v4.2.0
        with:
          path: Library
          key: Library-iOS-${{ hashFiles('Assets/**', 'Packages/**', 'ProjectSettings/**') }}
          restore-keys: |
            Library-iOS-

      - name: Build iOS Project (Xcode)
        uses: game-ci/unity-builder@v4.3.0
        env:
          UNITY_EMAIL: ${{ secrets.UNITY_EMAIL }}
          UNITY_PASSWORD: ${{ secrets.UNITY_PASSWORD }}
          UNITY_LICENSE: ${{ secrets.UNITY_LICENSE }}
        with:
          targetPlatform: iOS
          buildsPath: build
          unityVersion: ${{ env.UNITY_VERSION }}

      - name: Import Code Signing Certificates (.p12 only)
        uses: apple-actions/import-codesign-certs@v2
        with:
          p12-file-base64: ${{ secrets.IOS_P12_BASE64 }}
          p12-password: ${{ secrets.IOS_P12_PASSWORD }}

      - name: Install Provisioning Profile from Secret
        id: install_profile 
        env:
          MOBILEPROVISION_BASE64: ${{ secrets.IOS_MOBILEPROVISION_BASE64 }}
        run: |
          echo "Attempting to install provisioning profile manually..."
          PROF_DIR="$HOME/Library/MobileDevice/Provisioning Profiles"
          mkdir -p "$PROF_DIR"

          # base64デコードとプロファイルのインストール
          echo "$MOBILEPROVISION_BASE64" | base64 -D -o "$PROF_DIR/actions_profile.mobileprovision"

          # プロファイルのUUIDを取得し、出力として設定
          PROFILE_PATH="$PROF_DIR/actions_profile.mobileprovision"
          UUID=$(/usr/libexec/PlistBuddy -c "Print UUID" /dev/stdin <<< $(security cms -D -i "$PROFILE_PATH"))
          echo "Installed provisioning profile UUID: $UUID"
          echo "PROFILE_UUID=$UUID" >> $GITHUB_OUTPUT # UUIDをステップ出力に設定

          # プロファイルの存在確認
          if [ -f "$PROFILE_PATH" ]; then
            echo "Provisioning profile installed successfully"
            ls -l "$PROF_DIR"
          else
            echo "::error::Failed to install provisioning profile"
            exit 1
          fi
          sleep 1

      - name: Generate ExportOptions.plist from Secrets
        env:
          APPLE_TEAM_ID_SECRET: ${{ secrets.APPLE_TEAM_ID }}
          IOS_BUNDLE_ID_SECRET: ${{ secrets.IOS_BUNDLE_ID }}
          IOS_PROVISIONING_PROFILE_NAME_SECRET: ${{ secrets.IOS_PROVISIONING_PROFILE_NAME }}
          # ★★★ 重要: Code Signing Identity Secret を追加 ★★★
          IOS_CODE_SIGN_IDENTITY_SECRET: ${{ secrets.IOS_CODE_SIGN_IDENTITY }} # この Secret が必要
        run: |
          echo "Generating ExportOptions.plist..."
          PLIST_PATH="${{ github.workspace }}/ExportOptions.plist"

          # ExportOptions.plist を生成 - signingCertificate も Secret から取得するように変更
          cat << EOF > "${PLIST_PATH}"
          <?xml version="1.0" encoding="UTF-8"?>
          <!DOCTYPE plist PUBLIC "-//Apple//DTD PLIST 1.0//EN" "http://www.apple.com/DTDs/PropertyList-1.0.dtd">
          <plist version="1.0">
          <dict>
              <key>method</key>
              <string>ad-hoc</string>
              <key>teamID</key>
              <string>${APPLE_TEAM_ID_SECRET}</string>
              <key>provisioningProfiles</key>
              <dict>
                  <key>${IOS_BUNDLE_ID_SECRET}</key>
                  <string>${IOS_PROVISIONING_PROFILE_NAME_SECRET}</string>
              </dict>
              <key>signingCertificate</key>
              # <string>Apple Distribution</string> # ← より具体的な名前を使うことを推奨
              <string>${IOS_CODE_SIGN_IDENTITY_SECRET}</string> # ← Secret から取得
              <key>signingStyle</key>
              <string>manual</string>
              <key>stripSwiftSymbols</key>
              <true/>
              <key>uploadBitcode</key>
              <false/>
              <key>uploadSymbols</key>
              <true/>
          </dict>
          </plist>
          EOF

          echo "Generated ExportOptions.plist at ${PLIST_PATH}"
          cat "${PLIST_PATH}" # 生成された内容を確認
          echo "EXPORT_OPTIONS_PLIST_PATH=${PLIST_PATH}" >> $GITHUB_ENV

      - name: Build and Export .ipa
        env:
          # xcodebuild コマンド内で直接 Secrets を参照するため、ここで env を定義する必要は必ずしもない
          # APPLE_TEAM_ID: ${{ secrets.APPLE_TEAM_ID }} # xcodebuild内で直接 secrets を使う
          EXPORT_OPTIONS_PLIST_PATH: ${{ env.EXPORT_OPTIONS_PLIST_PATH }} # 前のステップで設定された plist パス
          # PROFILE_UUID: ${{ steps.install_profile.outputs.PROFILE_UUID }} # UUID を取得 (ただし、今回は使わない)
        run: |
          XCODE_PROJECT_PATH="${{ github.workspace }}/build/iOS/iOS/Unity-iPhone.xcodeproj"
          ARCHIVE_PATH="${{ github.workspace }}/build/iOS/archive.xcarchive"
          EXPORT_PATH="${{ github.workspace }}/build/iOS/ipa"
          PLIST_PATH="${{ env.EXPORT_OPTIONS_PLIST_PATH }}" # 前のステップで設定された plist パスを取得

          echo "Archiving Xcode project from: ${XCODE_PROJECT_PATH}"
          if [ ! -d "${XCODE_PROJECT_PATH}" ]; then
            echo "::error::Xcode project not found at specified path: ${XCODE_PROJECT_PATH}"
            ls -lR "${{ github.workspace }}/build/iOS/" # Xcodeプロジェクトが見つからない場合に周辺のファイル構造を表示
            exit 1
          fi
          # プロジェクト設定を上書きする
          # ※ Unity Editor で iOS の Player Settings > Other Settings > Signing Team ID が設定されているか確認してください
          # ※ Unity Editor で Bundle Identifier が ${{ secrets.IOS_BUNDLE_ID }} と一致しているか確認してください

          # --- xcodebuild archive コマンドの修正 ---
          xcodebuild archive \
            -project "${XCODE_PROJECT_PATH}" \
            -scheme Unity-iPhone \
            -sdk iphoneos \
            -archivePath "${ARCHIVE_PATH}" \
            CODE_SIGN_STYLE="Manual" \
            DEVELOPMENT_TEAM="${{ secrets.APPLE_TEAM_ID }}" \
            PROVISIONING_PROFILE_SPECIFIER="${{ secrets.IOS_PROVISIONING_PROFILE_NAME }}" \
            CODE_SIGN_IDENTITY="${{ secrets.IOS_CODE_SIGN_IDENTITY }}" # Secret を直接参照
            # PROVISIONING_PROFILE="${{ env.PROFILE_UUID }}" # ← UUID 指定は削除し、Specifier(Name)に依存

          # plist パスの存在確認
          if [ ! -f "${PLIST_PATH}" ]; then
            echo "::error::ExportOptions.plist not found at: ${PLIST_PATH}"
            exit 1
          fi

          echo "Exporting .ipa using generated plist: ${PLIST_PATH}"
          xcodebuild -exportArchive \
            -archivePath "${ARCHIVE_PATH}" \
            -exportPath "${EXPORT_PATH}" \
            -exportOptionsPlist "${PLIST_PATH}" # 動的に生成した plist を使用

          # IPAファイルが正しく生成されたか確認
          IPA_PATH=$(find "${EXPORT_PATH}" -maxdepth 1 -name "*.ipa" | head -n 1)
          if [[ -z "$IPA_PATH" ]]; then
            echo "::error::IPA file not found in ${EXPORT_PATH} after exportArchive."
            echo "Contents of ${EXPORT_PATH}:"
            ls -lR "${EXPORT_PATH}" || echo "Could not list ${EXPORT_PATH}"
            # アーカイブの内容も確認 (デバッグ用)
            echo "Contents of ${ARCHIVE_PATH}:"
            ls -lR "${ARCHIVE_PATH}" || echo "Could not list ${ARCHIVE_PATH}"
            exit 1
          fi
          echo "IPA_PATH=${IPA_PATH}" >> $GITHUB_ENV
          echo "IPA generated at: ${IPA_PATH}"

      - name: Upload iOS Build Artifact (.ipa)
        uses: actions/upload-artifact@v4.6.0
        with:
          name: Build-iOS-ipa
          path: ${{ env.IPA_PATH }} # 前のステップで設定された IPA パスを使用

      - name: Verify IPA file exists before upload (redundant check)
        # このステップは Upload Artifact が成功していれば不要かもしれないが、念のため残す
        run: |
          echo "Checking for IPA file at: ${{ env.IPA_PATH }}"
          ls -lh "${{ env.IPA_PATH }}"
          if [ ! -f "${{ env.IPA_PATH }}" ]; then
            echo "::error::IPA file not found!"
            exit 1
          fi

      # --- Firebase App Distribution Deployment Steps (iOS) ---
      - name: Install Firebase CLI (iOS)
        if: github.event_name != 'pull_request'
        run: |
          if ! command -v firebase &> /dev/null; then
            echo "Firebase CLI not found, installing..."
            curl -sL https://firebase.tools | bash
          fi
          firebase --version

      - name: Setup Service Account & Distribute (iOS)
        # if: github.event_name != 'pull_request' # Install step で条件分岐しているので、ここでは不要かも
        run: |
          # 1) JSON を復元
          echo "${{ secrets.GCP_SA_KEY }}" | base64 --decode > service_account.json
          # --- stat コマンドを修正 ---
          echo "Service Account JSON size: $(stat -f %z service_account.json) bytes"
          if [ $(stat -f %z service_account.json) -lt 100 ]; then
             echo "::warning::Service account JSON seems small."
             cat service_account.json # デバッグ用に内容表示
          fi

          # 2) 変数をエクスポート (これでこのステップのシェルで認識される)
          export GOOGLE_APPLICATION_CREDENTIALS="$(pwd)/service_account.json"

          # IPA パスの存在確認 (Firebase配布直前)
          echo "Distributing IPA from: ${{ env.IPA_PATH }}"
          if [ ! -f "${{ env.IPA_PATH }}" ]; then
            echo "::error::IPA file not found at expected path for distribution: ${{ env.IPA_PATH }}"
            exit 1
          fi

          # 3) Firebase CLI を使ってアップロード
          firebase appdistribution:distribute "${{ env.IPA_PATH }}" \
            --app "${{ secrets.FIREBASE_IOS_APP_ID }}" \
            --groups "testers" \
            --release-notes "iOS Release from GitHub Actions (${{ github.run_number }}) [Commit: ${{ github.sha }}]" \
            --debug # デバッグフラグを追加して詳細なログを出力

          echo "Firebase distribution command executed."
        env:
           CI: true # Firebase CLI が CI 環境であることを認識させる
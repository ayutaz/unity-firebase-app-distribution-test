name: Unity Build and Deploy

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]
  workflow_dispatch:

env:
  UNITY_VERSION: '6000.0.38f1'

jobs:
  # Android向けビルドとデプロイジョブ
  build-android:
    name: Build and Deploy Android
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4.2.2

      # ディスク容量の確保
      - name: Free disk space
        run: |
          sudo swapoff -a && sudo rm -f /swapfile
          sudo rm -rf /usr/share/dotnet
          sudo rm -rf /opt/ghc /usr/local/.ghcup
          sudo apt-get remove -y google-cloud-cli || sudo apt-get remove -y google-cloud-sdk
          sudo apt-get autoremove -y && sudo apt-get clean
          docker system prune -af
          df -h

      - name: Clean up Docker space
        run: docker system prune --volumes -a -f

      - name: Cache Unity Library - Android
        uses: actions/cache@v4.2.0
        with:
          path: Library
          key: Library-Android-${{ hashFiles('Assets/**', 'Packages/**', 'ProjectSettings/**') }}
          restore-keys: |
            Library-Android-

      - name: Build Android App
        uses: game-ci/unity-builder@v4.3.0
        env:
          UNITY_EMAIL: ${{ secrets.UNITY_EMAIL }}
          UNITY_PASSWORD: ${{ secrets.UNITY_PASSWORD }}
          UNITY_LICENSE: ${{ secrets.UNITY_LICENSE }}
        with:
          targetPlatform: Android
          buildsPath: build
          buildName: MyAndroidApp
          androidExportType: androidPackage
          unityVersion: ${{ env.UNITY_VERSION }}

      - name: Upload Android Build Artifact
        uses: actions/upload-artifact@v4.6.0
        with:
          name: Build-Android
          path: build/Android/MyAndroidApp.apk

      # Firebase App Distributionへのデプロイ（PRでない場合のみ）
      - name: Deploy to Firebase App Distribution
        if: github.event_name != 'pull_request'
        run: |
          # Google Cloud SDKのインストール
          sudo apt-get update
          sudo apt-get install -y apt-transport-https ca-certificates gnupg curl
          echo "deb [signed-by=/usr/share/keyrings/cloud.google.gpg] https://packages.cloud.google.com/apt cloud-sdk main" \
            | sudo tee -a /etc/apt/sources.list.d/google-cloud-sdk.list
          curl https://packages.cloud.google.com/apt/doc/apt-key.gpg \
            | sudo apt-key --keyring /usr/share/keyrings/cloud.google.gpg add -
          sudo apt-get update
          sudo apt-get install -y google-cloud-sdk

      # 3) Firebase CLI インストール (standalone)
      - name: Install Firebase CLI
        run: |
          curl -sL https://firebase.tools | bash
          firebase --version
          
      - name: Setup Service Account & Distribute
        run: |
          # 1) JSON を復元
          echo "${{ secrets.GCP_SA_KEY }}" | base64 --decode > service_account.json
          echo "Service Account JSON size: $(stat -c %s service_account.json) bytes"
          
          # 2) 変数をエクスポート (これでこのステップのシェルで認識される)
          export GOOGLE_APPLICATION_CREDENTIALS="$(pwd)/service_account.json"
          
          # 3) Firebase CLI を使ってアップロード
          firebase appdistribution:distribute build/Android/MyAndroidApp.apk \
            --app ${{ secrets.FIREBASE_ANDROID_APP_ID }} \
            --groups "testers" \
            --release-notes "Release from GitHub Actions" \

  # WebGL向けビルドとデプロイジョブ
  build-webgl:
    name: Build and Deploy WebGL
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4.2.2

      # ディスク容量の確保
      - name: Free disk space
        run: |
          sudo swapoff -a && sudo rm -f /swapfile
          sudo rm -rf /usr/share/dotnet
          sudo rm -rf /opt/ghc /usr/local/.ghcup
          sudo apt-get remove -y google-cloud-cli || sudo apt-get remove -y google-cloud-sdk
          sudo apt-get autoremove -y && sudo apt-get clean
          docker system prune -af
          df -h

      - name: Clean up Docker space
        run: docker system prune --volumes -a -f

      - name: Cache Unity Library - WebGL
        uses: actions/cache@v4.2.0
        with:
          path: Library
          key: Library-WebGL-${{ hashFiles('Assets/**', 'Packages/**', 'ProjectSettings/**') }}
          restore-keys: |
            Library-WebGL-

      - name: Build WebGL App
        uses: game-ci/unity-builder@v4.3.0
        env:
          UNITY_EMAIL: ${{ secrets.UNITY_EMAIL }}
          UNITY_PASSWORD: ${{ secrets.UNITY_PASSWORD }}
          UNITY_LICENSE: ${{ secrets.UNITY_LICENSE }}
        with:
          targetPlatform: WebGL
          buildsPath: build
          buildName: WebGL
          unityVersion: ${{ env.UNITY_VERSION }}

      - name: Upload WebGL Build Artifact
        uses: actions/upload-artifact@v4.6.0
        with:
          name: Build-WebGL
          path: build/WebGL
          retention-days: 14
      
      # ブランチ名からチャンネルIDを生成（PRでない場合のみ）
      - name: Generate Channel ID
        if: github.event_name != 'pull_request'
        id: channel
        run: |
          # ブランチ名を整形してチャンネルIDにする
          BRANCH_NAME="${GITHUB_REF#refs/heads/}"
          CHANNEL_ID=$(echo "$BRANCH_NAME" | tr '[:upper:]' '[:lower:]' | sed -e 's/[_\/]\+/-/g' -e 's/^-*//' -e 's/-*$//' -e 's/--*/-/g')
          CHANNEL_ID=$(echo "$CHANNEL_ID" | tr -cd 'a-z0-9-' | cut -c 1-36)

          # mainブランチの場合は 'live' チャンネルを指定 (Firebase のデフォルト本番チャンネル)
          if [[ "$BRANCH_NAME" == "main" ]]; then
            CHANNEL_ID="live" # 本番環境は 'live' チャンネルを使うのが一般的
          fi

          # チャンネルIDが空やハイフンだけになった場合のフォールバック
          if [[ -z "$CHANNEL_ID" || "$CHANNEL_ID" == "-" ]]; then
            CHANNEL_ID="preview-${GITHUB_SHA::7}"
          fi

          echo "Generated Channel ID: $CHANNEL_ID"
          echo "CHANNEL_ID=$CHANNEL_ID" >> $GITHUB_ENV

      # Firebase CLI を使って Hosting にデプロイ（PRでない場合のみ）
      - name: Deploy to Firebase Hosting using CLI
        if: github.event_name != 'pull_request'
        run: |
          # Firebase CLI がインストールされているか確認・インストール
          # Androidジョブでインストール済みの想定だが、独立実行の可能性も考慮
          if ! command -v firebase &> /dev/null
          then
              echo "Firebase CLI not found, installing..."
              # 依存関係の可能性のある curl を先に確認・インストール
              if ! command -v curl &> /dev/null; then sudo apt-get update && sudo apt-get install -y curl; fi
              curl -sL https://firebase.tools | bash
          fi
          firebase --version

          # サービスアカウントキーをファイルに書き出す
          # 注意: GitHub Secret に JSON をそのまま貼り付けた場合は Base64 デコードは不要です。
          # もし Secret を Base64 エンコードして保存している場合は、下のコメントアウトを解除してください。
          echo "${{ secrets.FIREBASE_SERVICE_ACCOUNT }}" > service_account.json
          # echo "${{ secrets.FIREBASE_SERVICE_ACCOUNT }}" | base64 --decode > service_account.json

          # ファイルが正常に作成されたか確認
          if [ ! -s service_account.json ]; then
            echo "Error: Failed to create service account file or file is empty."
            ls -l # ファイルの状態を確認
            cat service_account.json # 内容を確認 (空でないか)
            exit 1
          fi
          echo "Service Account JSON size: $(stat -c %s service_account.json) bytes"

          # 環境変数を設定して Firebase にログイン (サービスアカウントを使用)
          export GOOGLE_APPLICATION_CREDENTIALS="$(pwd)/service_account.json"

          # --- デプロイコマンド ---
          # プロジェクトIDを環境変数から取得
          FIREBASE_PROJECT="${{ env.FIREBASE_PROJECT_ID }}"
          if [ -z "$FIREBASE_PROJECT" ]; then
            echo "Error: FIREBASE_PROJECT_ID environment variable is not set."
            exit 1
          fi

          # チャンネルIDを取得
          DEPLOY_CHANNEL="${{ env.CHANNEL_ID }}"
          echo "Deploying to project '$FIREBASE_PROJECT' on channel '$DEPLOY_CHANNEL'"

          # 'live' チャンネル (本番) へのデプロイか、プレビューチャンネルへのデプロイかを判定
          if [[ "$DEPLOY_CHANNEL" == "live" ]]; then
             echo "Deploying to production (live) channel..."
             # 本番デプロイコマンド
             firebase deploy \
               --project "$FIREBASE_PROJECT" \
               --only hosting \
               --public build/WebGL \
               --message "Deploy build ${{ github.run_number }} from commit ${{ github.sha }} (branch: ${GITHUB_REF_NAME})" \
               --force # 非インタラクティブモードで実行（確認プロンプトをスキップ）
          else
             echo "Deploying to preview channel: $DEPLOY_CHANNEL"
             # プレビューチャンネルへのデプロイコマンド (チャンネルが存在しない場合は作成される)
             firebase hosting:channel:deploy "$DEPLOY_CHANNEL" \
               --project "$FIREBASE_PROJECT" \
               --only hosting \
               --public build/WebGL \
               --expires 7d # プレビューチャンネルの有効期限 (例: 7日間、不要なら削除)
               # --json # 必要ならJSON出力
               # --force # 必要な場合
          fi
          echo "Firebase deployment command executed."

        env:
          # Hosting Channels プレビュー機能（現在は一般利用可能だが念のため）
          FIREBASE_CLI_PREVIEWS: hostingchannels
          # CI環境であることを示す（一部のプロンプトを抑制する可能性）
          CI: true

      # デプロイURL表示（PRでない場合のみ）
      - name: Output Deploy URL
        if: github.event_name != 'pull_request'
        run: |
          echo "WebGL build deployment process finished for channel: ${{ env.CHANNEL_ID }}"
          # channelId が 'live' の場合、本番URLを表示
          # それ以外はプレビューチャンネルのURLを表示
          if [[ "${{ env.CHANNEL_ID }}" == "live" ]]; then
            echo "Production URL: https://${{ env.FIREBASE_PROJECT_ID }}.web.app"
            echo "Production URL (firebaseapp.com): https://${{ env.FIREBASE_PROJECT_ID }}.firebaseapp.com"
          else
            echo "Preview URL: https://${{ env.FIREBASE_PROJECT_ID }}--${{ env.CHANNEL_ID }}.web.app"
            echo "Preview URL (firebaseapp.com): https://${{ env.FIREBASE_PROJECT_ID }}--${{ env.CHANNEL_ID }}.firebaseapp.com"
          fi